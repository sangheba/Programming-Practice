package Studying;
import java.util.regex.*;
public class RegExStudying {
    public static void main(String[] args) {
        String longString = "Derek banas CA 12456 PA (412)555-1212 johnsmith";
        String strangeString = "1Z aaa **** *** {{{ {{ { ";

        //Word that is 2 to 20 characters in length

        // [A-Za-z]{2,20} \\w{2,20}

        regexChecker("\\S[A-ZZa-z]{2,20}\\s", longString);
    }

    public static void regexChecker(String theRegex, String str2Check){

        Pattern checkRegex = Pattern.compile(theRegex);

        Matcher regexMatcher = checkRegex.matcher(str2Check);

        while (regexMatcher.find()){
            if (regexMatcher.group().length() != 0){
                System.out.println(regexMatcher.group().trim());
            }

            System.out.println("Start index: " + regexMatcher.start());
            System.out.println("End Index: " + regexMatcher.end());
        }

        String challenge11 = "{0, 2}, {0, 5}, {1, 3}, {2, 4}";

        String regex11 = "([^{}])"; //This regex returns everything that
        // isn't a curly brace. It would be better written "\\{(\\d+, \\d+)\\}"
        Pattern pattern = Pattern.compile(regex11);
        Matcher matcher = pattern.matcher(challenge11);

        while (matcher.find()) {
        System.out.print(matcher.group(1));
        }

        System.out.println("\n*****************************");
        String challenge12 = "11234, 666666";
        String regex12 = "\\b\\d{5}\\b";
        Pattern pattern12 = Pattern.compile(regex12);
        Matcher matcher12 = pattern12.matcher(challenge12);

        while (matcher12.find()) {
            System.out.println(matcher12.group(0));
        }

        String challenge13 = "11111-1111";
        System.out.println(challenge13.matches("\\d{5}-\\d{4}"));

        String challenge14 = "11111-1111,12345,dfgdg";
        String regex14 = "(\\d{5}-\\d{4}|\\b\\d{5}\\b)";
        Pattern pattern14 = Pattern.compile(regex14);
        Matcher matcher14 = pattern14.matcher(challenge14);

        while (matcher14.find()) {
            System.out.println(matcher14.group(1));
        }

    }
}
